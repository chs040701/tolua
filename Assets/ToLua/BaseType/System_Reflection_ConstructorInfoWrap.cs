//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Reflection_ConstructorInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Reflection.ConstructorInfo), typeof(System.Reflection.MethodBase));
		L.RegFunction("Invoke", Invoke);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ConstructorName", get_ConstructorName, null);
		L.RegVar("TypeConstructorName", get_TypeConstructorName, null);
		L.RegVar("MemberType", get_MemberType, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Invoke(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Reflection.ConstructorInfo obj = (System.Reflection.ConstructorInfo)ToLua.CheckObject<System.Reflection.ConstructorInfo>(L, 1);
				object[] arg0 = ToLua.CheckObjectArray(L, 2);
				object o = obj.Invoke(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Reflection.ConstructorInfo obj = (System.Reflection.ConstructorInfo)ToLua.CheckObject<System.Reflection.ConstructorInfo>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				object[] arg1 = ToLua.CheckObjectArray(L, 3);
				object o = obj.Invoke(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				System.Reflection.ConstructorInfo obj = (System.Reflection.ConstructorInfo)ToLua.CheckObject<System.Reflection.ConstructorInfo>(L, 1);
				System.Reflection.BindingFlags arg0 = (System.Reflection.BindingFlags)LuaDLL.luaL_checknumber(L, 2);
				System.Reflection.Binder arg1 = (System.Reflection.Binder)ToLua.CheckObject<System.Reflection.Binder>(L, 3);
				object[] arg2 = ToLua.CheckObjectArray(L, 4);
				System.Globalization.CultureInfo arg3 = (System.Globalization.CultureInfo)ToLua.CheckObject<System.Globalization.CultureInfo>(L, 5);
				object o = obj.Invoke(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				System.Reflection.ConstructorInfo obj = (System.Reflection.ConstructorInfo)ToLua.CheckObject<System.Reflection.ConstructorInfo>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				System.Reflection.BindingFlags arg1 = (System.Reflection.BindingFlags)LuaDLL.luaL_checknumber(L, 3);
				System.Reflection.Binder arg2 = (System.Reflection.Binder)ToLua.CheckObject<System.Reflection.Binder>(L, 4);
				object[] arg3 = ToLua.CheckObjectArray(L, 5);
				System.Globalization.CultureInfo arg4 = (System.Globalization.CultureInfo)ToLua.CheckObject<System.Globalization.CultureInfo>(L, 6);
				object o = obj.Invoke(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Reflection.ConstructorInfo.Invoke");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Reflection.ConstructorInfo obj = (System.Reflection.ConstructorInfo)ToLua.CheckObject<System.Reflection.ConstructorInfo>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Reflection.ConstructorInfo obj = (System.Reflection.ConstructorInfo)ToLua.CheckObject<System.Reflection.ConstructorInfo>(L, 1);
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Reflection.ConstructorInfo arg0 = (System.Reflection.ConstructorInfo)ToLua.ToObject(L, 1);
			System.Reflection.ConstructorInfo arg1 = (System.Reflection.ConstructorInfo)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConstructorName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, System.Reflection.ConstructorInfo.ConstructorName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TypeConstructorName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, System.Reflection.ConstructorInfo.TypeConstructorName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MemberType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.ConstructorInfo obj = (System.Reflection.ConstructorInfo)o;
			System.Reflection.MemberTypes ret = obj.MemberType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MemberType on a nil value");
		}
	}
}

