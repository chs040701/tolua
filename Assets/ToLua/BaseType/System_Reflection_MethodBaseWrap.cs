//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Reflection_MethodBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Reflection.MethodBase), typeof(System.Object));
		L.RegFunction("GetParameters", GetParameters);
		L.RegFunction("GetMethodImplementationFlags", GetMethodImplementationFlags);
		L.RegFunction("GetMethodBody", GetMethodBody);
		L.RegFunction("GetGenericArguments", GetGenericArguments);
		L.RegFunction("Invoke", Invoke);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("GetMethodFromHandle", GetMethodFromHandle);
		L.RegFunction("GetCurrentMethod", GetCurrentMethod);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Attributes", get_Attributes, null);
		L.RegVar("MethodImplementationFlags", get_MethodImplementationFlags, null);
		L.RegVar("CallingConvention", get_CallingConvention, null);
		L.RegVar("IsAbstract", get_IsAbstract, null);
		L.RegVar("IsConstructor", get_IsConstructor, null);
		L.RegVar("IsFinal", get_IsFinal, null);
		L.RegVar("IsHideBySig", get_IsHideBySig, null);
		L.RegVar("IsSpecialName", get_IsSpecialName, null);
		L.RegVar("IsStatic", get_IsStatic, null);
		L.RegVar("IsVirtual", get_IsVirtual, null);
		L.RegVar("IsAssembly", get_IsAssembly, null);
		L.RegVar("IsFamily", get_IsFamily, null);
		L.RegVar("IsFamilyAndAssembly", get_IsFamilyAndAssembly, null);
		L.RegVar("IsFamilyOrAssembly", get_IsFamilyOrAssembly, null);
		L.RegVar("IsPrivate", get_IsPrivate, null);
		L.RegVar("IsPublic", get_IsPublic, null);
		L.RegVar("IsConstructedGenericMethod", get_IsConstructedGenericMethod, null);
		L.RegVar("IsGenericMethod", get_IsGenericMethod, null);
		L.RegVar("IsGenericMethodDefinition", get_IsGenericMethodDefinition, null);
		L.RegVar("ContainsGenericParameters", get_ContainsGenericParameters, null);
		L.RegVar("MethodHandle", get_MethodHandle, null);
		L.RegVar("IsSecurityCritical", get_IsSecurityCritical, null);
		L.RegVar("IsSecuritySafeCritical", get_IsSecuritySafeCritical, null);
		L.RegVar("IsSecurityTransparent", get_IsSecurityTransparent, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetParameters(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)ToLua.CheckObject<System.Reflection.MethodBase>(L, 1);
			System.Reflection.ParameterInfo[] o = obj.GetParameters();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMethodImplementationFlags(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)ToLua.CheckObject<System.Reflection.MethodBase>(L, 1);
			System.Reflection.MethodImplAttributes o = obj.GetMethodImplementationFlags();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMethodBody(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)ToLua.CheckObject<System.Reflection.MethodBase>(L, 1);
			System.Reflection.MethodBody o = obj.GetMethodBody();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGenericArguments(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)ToLua.CheckObject<System.Reflection.MethodBase>(L, 1);
			System.Type[] o = obj.GetGenericArguments();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Invoke(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				System.Reflection.MethodBase obj = (System.Reflection.MethodBase)ToLua.CheckObject<System.Reflection.MethodBase>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				object[] arg1 = ToLua.CheckObjectArray(L, 3);
				object o = obj.Invoke(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6)
			{
				System.Reflection.MethodBase obj = (System.Reflection.MethodBase)ToLua.CheckObject<System.Reflection.MethodBase>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				System.Reflection.BindingFlags arg1 = (System.Reflection.BindingFlags)LuaDLL.luaL_checknumber(L, 3);
				System.Reflection.Binder arg2 = (System.Reflection.Binder)ToLua.CheckObject<System.Reflection.Binder>(L, 4);
				object[] arg3 = ToLua.CheckObjectArray(L, 5);
				System.Globalization.CultureInfo arg4 = (System.Globalization.CultureInfo)ToLua.CheckObject<System.Globalization.CultureInfo>(L, 6);
				object o = obj.Invoke(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Reflection.MethodBase.Invoke");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)ToLua.CheckObject<System.Reflection.MethodBase>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)ToLua.CheckObject<System.Reflection.MethodBase>(L, 1);
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Reflection.MethodBase arg0 = (System.Reflection.MethodBase)ToLua.ToObject(L, 1);
			System.Reflection.MethodBase arg1 = (System.Reflection.MethodBase)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMethodFromHandle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				System.RuntimeMethodHandle arg0 = StackTraits<System.RuntimeMethodHandle>.Check(L, 1);
				System.Reflection.MethodBase o = System.Reflection.MethodBase.GetMethodFromHandle(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 2)
			{
				System.RuntimeMethodHandle arg0 = StackTraits<System.RuntimeMethodHandle>.Check(L, 1);
				System.RuntimeTypeHandle arg1 = StackTraits<System.RuntimeTypeHandle>.Check(L, 2);
				System.Reflection.MethodBase o = System.Reflection.MethodBase.GetMethodFromHandle(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Reflection.MethodBase.GetMethodFromHandle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentMethod(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Reflection.MethodBase o = System.Reflection.MethodBase.GetCurrentMethod();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Attributes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			System.Reflection.MethodAttributes ret = obj.Attributes;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Attributes on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MethodImplementationFlags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			System.Reflection.MethodImplAttributes ret = obj.MethodImplementationFlags;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MethodImplementationFlags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CallingConvention(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			System.Reflection.CallingConventions ret = obj.CallingConvention;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CallingConvention on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAbstract(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsAbstract;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAbstract on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsConstructor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsConstructor;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsConstructor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFinal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsFinal;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFinal on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsHideBySig(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsHideBySig;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsHideBySig on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSpecialName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsSpecialName;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsSpecialName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsStatic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsStatic;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsStatic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsVirtual(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsVirtual;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsVirtual on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsAssembly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsAssembly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsAssembly on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFamily(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsFamily;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFamily on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFamilyAndAssembly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsFamilyAndAssembly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFamilyAndAssembly on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsFamilyOrAssembly(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsFamilyOrAssembly;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsFamilyOrAssembly on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsPrivate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsPrivate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsPrivate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsPublic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsPublic;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsPublic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsConstructedGenericMethod(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsConstructedGenericMethod;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsConstructedGenericMethod on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsGenericMethod(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsGenericMethod;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsGenericMethod on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsGenericMethodDefinition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsGenericMethodDefinition;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsGenericMethodDefinition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ContainsGenericParameters(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.ContainsGenericParameters;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContainsGenericParameters on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MethodHandle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			System.RuntimeMethodHandle ret = obj.MethodHandle;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MethodHandle on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSecurityCritical(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsSecurityCritical;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsSecurityCritical on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSecuritySafeCritical(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsSecuritySafeCritical;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsSecuritySafeCritical on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsSecurityTransparent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Reflection.MethodBase obj = (System.Reflection.MethodBase)o;
			bool ret = obj.IsSecurityTransparent;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsSecurityTransparent on a nil value");
		}
	}
}

